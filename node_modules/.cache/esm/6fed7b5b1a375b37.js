let mongoose,bcrypt,jwt,SECRET_KEY;_1a3‍.x([["default",()=>_1a3‍.o]]);_1a3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_1a3‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_1a3‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_1a3‍.w("../config",[["SECRET_KEY",["SECRET_KEY"],function(v){SECRET_KEY=v}]]);




const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    cpassword: {
        type: String,
        required: true
    },
    tokens: [
        {
            token: {
                type: String,
                required: true
            }
        }
    ]
})

userSchema.pre('save', async function (next) {
    if (this.isModified('password')) {
        this.password = await bcrypt.hash(this.password, 12)
        this.cpassword = await bcrypt.hash(this.cpassword, 12)
    }
    next()
})

userSchema.methods.generateAuthToken = async function () {
    try {
        let token = jwt.sign({ _id: this._id }, SECRET_KEY)
        this.tokens = this.tokens.concat({ token: token })
        await this.save()
        return token
    } catch (error) {
        _1a3‍.g.console.log(error)
    }
}
const user = mongoose.model('user', userSchema)

_1a3‍.d(user);
