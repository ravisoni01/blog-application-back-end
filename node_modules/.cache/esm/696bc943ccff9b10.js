let User,bcrypt;_ccf‍.x([["register",()=>register],["login",()=>login]]);_ccf‍.w("../models/userSchema",[["default",["User"],function(v){User=v}]]);_ccf‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

       const register = async (req, res) => {
    const { name, email, password, cpassword } = req.body
    if (!name || !email || !password || !cpassword) {
        return res.status(422).json({ error: "Please filled the field properly" })
    }
    try {
        const userExist = await User.findOne({ email: email })
        if (userExist) {
            return res.status(422).json({ error: "Email already exist" })
        }
        else if (password != cpassword) {
            return res.status(422).json({ error: "password are not matching" })
        }
        else {
            const user = new User({ name, email, password, cpassword })
            await user.save()
            res.status(201).json({ messgae: "user registered successfully" })
        }
    } catch (error) {
        res.status(500).json(error)
    }
}

       const login = async (req, res) => {
    try {
        const { email, password } = req.body
        if (!email || !password) {
            return res.status(422).json({ error: "Please filled the field properly" })
        }
        const loginExist = await User.findOne({ email: email })

        if (loginExist) {
            const isMatch = await bcrypt.compare(password, loginExist.password)
            const token = await loginExist.generateAuthToken();
            res.cookie("jwtoken", token, {
                expires: new Date(Date.now() + 25892000000),
                httpOnly: true
            })

            if (!isMatch) {
                res.status(400).json("Invalid Credientials")
            }
            else {
                res.json({ message: "User Login Successfully" })
            }
        }
        else {
            res.status(400).json("Invalid Credientials")
        }

    } catch (error) {
        _ccf‍.g.console.log(error)
    }
}